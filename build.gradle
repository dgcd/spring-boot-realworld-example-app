plugins {
    id 'org.springframework.boot' version '2.6.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.netflix.dgs.codegen' version '5.1.16'
    id 'eclipse'
    id 'idea'
    id 'java'
}

version = '0.0.1-SNAPSHOT'
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
}

configurations {
    compileOnly.extendsFrom annotationProcessor
    testCompileOnly.extendsFrom annotationProcessor
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation "org.mybatis.spring.boot:mybatis-spring-boot-starter:${mybatisStarterVersion}"
    implementation 'com.netflix.graphql.dgs:graphql-dgs-spring-boot-starter:latest.release'

    implementation 'org.flywaydb:flyway-core'
    implementation "io.jsonwebtoken:jjwt:${jsonwebtokenVersion}"
    implementation "joda-time:joda-time:${hodaTimeVersion}"
    implementation "org.xerial:sqlite-jdbc:${sqliteJdbcVersion}"

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation "org.mybatis.spring.boot:mybatis-spring-boot-starter-test:${mybatisStarterVersion}"

    testImplementation 'org.junit.vintage:junit-vintage-engine'
    testImplementation "io.rest-assured:rest-assured:${restAssuredVersion}"
    testImplementation "io.rest-assured:spring-mock-mvc:${restAssuredVersion}"
    testImplementation "io.rest-assured:xml-path:${restAssuredVersion}"
    testImplementation "io.rest-assured:json-path:${restAssuredVersion}"
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named('generateJava') {
    schemaPaths = ["${projectDir}/src/main/resources/schema"] // List of directories containing schema files
    packageName = 'io.spring.graphql' // The package name to use to generate sources
}

tasks.named('jar') {
    enabled = false
}

tasks.named('clean') {
    doFirst {
        delete './dev.db/'
    }
}
